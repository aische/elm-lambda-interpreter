
let true = \t.\f.t
let false = \t.\f.f
let not = \p.@@p false true
let and = \a.\b.@@a b false
let or = \a.\b.@@a true b
let xor = \a.\b.@@a @@b false true b
let if = \p.\a.\b.@@p a b

let zero = \f.\x.x
let succ = \n.\f.\x.@f @@n f x
let add = \m.\n.\f.\x.@@m f @@n f x
let mult = \m.\n.\f.@m@n f
let pred = \n.\f.\x.@@@n \g.\h.@h@g f \u.x \u.u
let minus = \m.\n.@@n pred m

let iszero = \n.@@n \x.false true
let lesseq = \m.\n.@ iszero @@minus m n
let equals = \m.\n. @@and @@lesseq m n @@lesseq n m

let pair = \x.\y.\z.@@z x y
let fst = \p.@p \x.\y.x
let snd = \p.@p \x.\y.y

let nil = @@pair true true
let isnil = fst
let cons = \h.\t.@@pair false @@pair h t
let head = \z.@fst @snd z
let tail = \z.@snd @snd z

let one = @succ zero
let two = @succ @succ zero
let three = @succ two
let nine = @@mult @@add one two three
let twelve = @@mult @@minus nine three two

let fix = \f.@ \x.@f @x x \x.@f @x x

let fold = \fold.\f.\x.\list.@@@if @isnil list x @@f @head list @@@fold f x @tail list
let sum = \sum.\list. @@@if @isnil list zero @@add @head list @sum @tail list
let fak = \f.\n.@@@if @iszero n one @@mult n @f@pred n

let list1 = @@cons one @@cons two @@cons three @@cons three @@cons two nil

let main = @@@@fix fold mult one list1
@@main nachfolger nix




